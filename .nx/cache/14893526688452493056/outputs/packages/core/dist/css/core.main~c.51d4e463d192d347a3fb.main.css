@import url(https://fonts.googleapis.com/css2?family=Ubuntu:ital,wght@0,300;0,400;0,500;0,700;1,300;1,400;1,500;1,700&display=swap);
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-text {
  font-size: var(--text-size);
  color: var(--text-color);
  line-height: var(--text-lh);
  font-weight: var(--text-weight);
  text-align: var(--text-align);
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.skeleton {
  width: 100%;
  height: 100%;
  background-color: var(--semantic-color-monochrome-surface-normal-lowest);
  border-radius: var(--semantic-borderRadius-md);
}

.skeleton.animated {
  animation: var(--motion-duration-moderate) ease-out alternate infinite pulsate;
}

@keyframes pulsate {
  to {
    background-color: var(--semantic-color-monochrome-surface-normal-low);
  }
}

.skeleton.icon {
  width: var(--size-generic-md);
  height: var(--size-generic-md);
}

.skeleton-paragraph {
  display: flex;
  flex-direction: column;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-icon, .dc-popover__target__icon .info:hover {
  --fill-color1: var(--text-general);
  --fill-color2: var(--text-less-prominent);
  --fill-color3: var(--general-section-1);
  --fill-color4: var(--icon-grey-background);
  --fill-color5: var(--text-prominent);
}

.dc-icon--disabled, .dc-popover__target__icon--disabled .info:hover, .dc-popover__target__icon--disabled .info {
  --fill-color1: var(--text-disabled);
  --fill-color2: var(--text-disabled);
}

.dc-icon--active {
  --fill-color1: #ffffff;
  --fill-color2: #ffffff;
}

.dc-icon--green {
  --fill-color1: var(--text-profit-success);
  --fill-color2: var(--text-profit-success);
  --fill-color3: #ffffff;
}

.dc-icon--red {
  --fill-color1: var(--text-loss-danger);
  --fill-color2: var(--text-loss-danger);
  --fill-color3: #ffffff;
}

.dc-icon--secondary, .dc-popover__target__icon .info {
  --fill-color1: var(--text-less-prominent);
  --fill-color2: var(--text-less-prominent);
  --fill-color3: #ffffff;
}

.dc-icon--brand {
  --fill-color1: var(--brand-red-coral);
  --fill-color2: var(--brand-secondary);
  --fill-color3: #ffffff;
}

.dc-icon--black {
  --fill-color1: var(--icon-black-plus);
}

.dc-icon--orange {
  --fill-color1: var(--status-warning);
}

.dc-popover__wrapper {
  position: relative;
}

.dc-popover__container {
  position: absolute;
  left: 0;
  top: 0;
  width: 280px;
}

.dc-popover__container-relative {
  position: relative;
}

.dc-popover__target__icon .counter {
  color: var(--brand-red-coral);
  font-size: 10px;
  font-weight: bold;
  line-height: 1.4em;
  position: absolute;
  top: 50%;
  transform: translateY(-65%);
}

.dc-popover__bubble {
  font-size: 1.2rem;
  color: var(--text-colored-background);
  font-weight: 400;
  text-transform: none;
  text-align: center;
  line-height: 1.25;
  cursor: help;
  position: relative;
  padding: 0.8rem;
  max-width: 31.7rem;
  border-radius: 4px;
  display: flex;
  flex-direction: row;
  background: var(--general-active);
  color: var(--text-prominent);
  z-index: 1;
}

.dc-popover__bubble__icon {
  flex-grow: 1;
  padding-top: 3px;
}

[dir="ltr"] .dc-popover__bubble__icon {
  margin-right: 0.7em;
}

[dir="rtl"] .dc-popover__bubble__icon {
  margin-left: 0.7em;
}

.dc-popover__bubble__text {
  flex-grow: 2;
}

[dir="ltr"] .dc-popover__bubble__text {
  direction: ltr;
}

[dir="rtl"] .dc-popover__bubble__text {
  direction: rtl;
}

.dc-popover__bubble--error {
  background-color: var(--status-danger);
}

[dir="ltr"] .dc-popover__bubble--error {
  direction: ltr;
}

[dir="rtl"] .dc-popover__bubble--error {
  direction: rtl;
}

@media (min-width: 320px) and (max-width: 767px) {
  .dc-popover__trade-params {
    max-width: calc(100vw - 6.7rem);
  }
}

.mobile-widget__item-popover,
.accu-info-display__popover {
  max-width: 28rem;
}

@media (min-width: 320px) and (max-width: 767px) {
  .accu-info-display__popover {
    max-width: 33rem;
  }

  [dir="ltr"] .accu-info-display__popover {
    margin-right: 1rem;
  }

  [dir="rtl"] .accu-info-display__popover {
    margin-left: 1rem;
  }
}

.react-tiny-popover-container--disabled-pointer-event {
  pointer-events: none;
}

.react-tiny-popover-cursor-option {
  cursor: pointer;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/** @define dc-progress-slider */
.dc-progress-slider {
  position: relative;
  width: 100%;
  padding: 0;
  padding: initial;
  box-sizing: border-box;
  margin: 8px 0;
  border-bottom: 1px solid var(--general-section-1);
}

.dc-progress-slider--completed {
  border-bottom: 1px solid var(--general-section-6);
  margin: 0.4rem 0 0.8rem;
}

.dc-progress-slider__track {
  background: var(--text-disabled);
  position: relative;
  margin: 2px 0 8px;
  height: 6px;
  width: 100%;
  border-radius: 8px;
}

.dc-progress-slider__ticks {
  position: relative;
}

.dc-progress-slider__ticks-wrapper {
  position: relative;
  margin: 2px 0 8px;
  height: 6px;
  width: 100%;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
}

.dc-progress-slider__ticks-step {
  height: 6px;
  width: 100%;
  margin: 0 2px;
  position: relative;
  background: var(--state-hover);
}

.dc-progress-slider__ticks-step:before {
  position: absolute;
  content: "";
  transition: transform 0.25s ease-in;
  transform: scale3d(0, 1, 1);
  top: 0;
  height: 6px;
  width: 100%;
  background-color: var(--brand-secondary);
}

[dir="ltr"] .dc-progress-slider__ticks-step:before {
  transform-origin: left;
  left: 0;
}

[dir="rtl"] .dc-progress-slider__ticks-step:before {
  transform-origin: right;
  right: 0;
}

.dc-progress-slider__ticks-step--marked:before {
  transform: scale3d(1, 1, 1);
}

[dir="ltr"] .dc-progress-slider__ticks-step:first-child {
  margin-left: 0;
}

[dir="rtl"] .dc-progress-slider__ticks-step:first-child {
  margin-right: 0;
}

[dir="ltr"] .dc-progress-slider__ticks-step:last-child {
  margin-right: 0;
}

[dir="rtl"] .dc-progress-slider__ticks-step:last-child {
  margin-left: 0;
}

[dir="ltr"] .dc-progress-slider__ticks-step:first-child, [dir="ltr"] .dc-progress-slider__ticks-step:first-child:before {
  border-top-left-radius: 4px;
  border-bottom-left-radius: 4px;
}

[dir="rtl"] .dc-progress-slider__ticks-step:first-child, [dir="rtl"] .dc-progress-slider__ticks-step:first-child:before {
  border-top-right-radius: 4px;
  border-bottom-right-radius: 4px;
}

[dir="ltr"] .dc-progress-slider__ticks-step:last-child, [dir="ltr"] .dc-progress-slider__ticks-step:last-child:before {
  border-top-right-radius: 4px;
  border-bottom-right-radius: 4px;
}

[dir="rtl"] .dc-progress-slider__ticks-step:last-child, [dir="rtl"] .dc-progress-slider__ticks-step:last-child:before {
  border-top-left-radius: 4px;
  border-bottom-left-radius: 4px;
}

.dc-progress-slider__ticks-caption {
  display: flex;
  justify-content: space-between;
}

.dc-progress-slider__line {
  background: var(--state-hover);
  position: absolute;
  top: 0;
  height: 100%;
  border-radius: 8px;
  pointer-events: none;
  transition: width 0.3s;
}

[dir="ltr"] .dc-progress-slider__line {
  left: 0;
}

[dir="rtl"] .dc-progress-slider__line {
  right: 0;
}

.dc-progress-slider__line--ticks {
  height: 2px;
}

.dc-progress-slider__line--green {
  background: var(--status-success) !important;
}

.dc-progress-slider__line--yellow {
  background: var(--status-warning) !important;
}

.dc-progress-slider__line--red {
  background: var(--status-danger) !important;
}

.dc-progress-slider__infinite-loader {
  position: relative;
  height: 4px;
  display: block;
  width: 100%;
  background-color: var(--state-hover);
  border-radius: 2px;
  background-clip: padding-box;
  margin: 0.5rem 0 1rem;
  overflow: hidden;
}

.dc-progress-slider__infinite-loader--indeterminate {
  background-color: var(--state-active);
}

.dc-progress-slider__infinite-loader--indeterminate:before, .dc-progress-slider__infinite-loader--indeterminate:after {
  content: "";
  position: absolute;
  background-color: inherit;
  top: 0;
  bottom: 0;
  will-change: left, right;
}

[dir="ltr"] .dc-progress-slider__infinite-loader--indeterminate:before, [dir="ltr"] .dc-progress-slider__infinite-loader--indeterminate:after {
  left: 0;
}

[dir="rtl"] .dc-progress-slider__infinite-loader--indeterminate:before, [dir="rtl"] .dc-progress-slider__infinite-loader--indeterminate:after {
  right: 0;
}

.dc-progress-slider__infinite-loader--indeterminate:before {
  animation: indeterminate 2.1s cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite;
}

.dc-progress-slider__infinite-loader--indeterminate:after {
  animation: indeterminate-short 2.1s cubic-bezier(0.165, 0.84, 0.44, 1) infinite;
  animation-delay: 1.15s;
}

@keyframes indeterminate {
  0% {
    left: -35%;
    right: 100%;
  }

  60% {
    left: 100%;
    right: -90%;
  }

  100% {
    left: 100%;
    right: -90%;
  }
}

@keyframes indeterminate-short {
  0% {
    left: -200%;
    right: 100%;
  }

  60% {
    left: 107%;
    right: -8%;
  }

  100% {
    left: 107%;
    right: -8%;
  }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-tick-progress {
  display: grid;
  grid-gap: 0.8rem;
}

.dc-tick-progress__tick {
  border-radius: 50%;
  width: 0.8rem;
  height: 0.8rem;
  background-color: var(--fill-disabled);
}

.dc-tick-progress__tick--on {
  background-color: var(--brand-secondary);
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-progress-slider-mobile {
  display: flex;
  flex-direction: column;
  align-items: center;
}

.dc-progress-slider-mobile__timer {
  margin: 0.2rem auto;
}

.dc-progress-slider-mobile__infinite-loader {
  position: relative;
  height: 4px;
  display: block;
  width: 100%;
  background-color: var(--state-hover);
  border-radius: 2px;
  background-clip: padding-box;
  margin: 0.5rem 0 1rem;
  overflow: hidden;
}

.dc-progress-slider-mobile__infinite-loader--indeterminate {
  background-color: var(--state-active);
}

.dc-progress-slider-mobile__infinite-loader--indeterminate:before, .dc-progress-slider-mobile__infinite-loader--indeterminate:after {
  content: "";
  position: absolute;
  background-color: inherit;
  top: 0;
  bottom: 0;
  will-change: left, right;
}

[dir="ltr"] .dc-progress-slider-mobile__infinite-loader--indeterminate:before, [dir="ltr"] .dc-progress-slider-mobile__infinite-loader--indeterminate:after {
  left: 0;
}

[dir="rtl"] .dc-progress-slider-mobile__infinite-loader--indeterminate:before, [dir="rtl"] .dc-progress-slider-mobile__infinite-loader--indeterminate:after {
  right: 0;
}

.dc-progress-slider-mobile__infinite-loader--indeterminate:before {
  animation: indeterminate 2.1s cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite;
}

.dc-progress-slider-mobile__infinite-loader--indeterminate:after {
  animation: indeterminate-short 2.1s cubic-bezier(0.165, 0.84, 0.44, 1) infinite;
  animation-delay: 1.15s;
}

@keyframes indeterminate {
  0% {
    left: -35%;
    right: 100%;
  }

  60% {
    left: 100%;
    right: -90%;
  }

  100% {
    left: 100%;
    right: -90%;
  }
}

@keyframes indeterminate-short {
  0% {
    left: -200%;
    right: 100%;
  }

  60% {
    left: 107%;
    right: -8%;
  }

  100% {
    left: 107%;
    right: -8%;
  }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */

.dc-tooltip {
  text-decoration: none;
  font-size: inherit;
  color: var(--text-prominent);
}

.dc-tooltip:before {
  background: var(--status-default);
}

.dc-tooltip:after, .dc-tooltip[data-tooltip-pos=top]:after {
  border-top-color: var(--status-default);
}

.dc-tooltip[data-tooltip-pos=right]:after {
  border-top-color: transparent;
  border-right-color: var(--status-default);
}

.dc-tooltip[data-tooltip-pos=left]:after {
  border-top-color: transparent;
  border-left-color: var(--status-default);
}

.dc-tooltip[data-tooltip-pos=bottom]:after {
  border-top-color: transparent;
  border-bottom-color: var(--status-default);
}

.dc-tooltip__balloon-icon {
  position: absolute;
  top: 0;
  left: -319px;
  z-index: 999;
  opacity: 0;
  transition: opacity 0.3s;
  pointer-events: none;
}

.dc-tooltip__balloon-icon--show {
  transition: opacity 0.3s 0.2s;
  opacity: 1;
}

.dc-tooltip[data-tooltip] {
  cursor: auto;
  cursor: initial;
  display: block;
}

.dc-tooltip[data-tooltip]:before {
  background: var(--status-default);
}

.dc-tooltip[data-tooltip]:after, .dc-tooltip[data-tooltip][data-tooltip-pos=top]:after {
  border-top-color: var(--status-default);
}

.dc-tooltip[data-tooltip][data-tooltip-pos=right]:after {
  border-top-color: transparent;
  border-right-color: var(--status-default);
}

.dc-tooltip[data-tooltip][data-tooltip-pos=left]:after {
  border-top-color: transparent;
  border-left-color: var(--status-default);
}

.dc-tooltip[data-tooltip][data-tooltip-pos=bottom]:after {
  border-top-color: transparent;
  border-bottom-color: var(--status-default);
}

.dc-tooltip[data-tooltip]:hover:after, .dc-tooltip[data-tooltip]:hover:before {
  opacity: 0.96;
  pointer-events: auto;
  transform: translate(-50%, 0);
}

.dc-tooltip[data-tooltip]:before, .dc-tooltip[data-tooltip]:after {
  opacity: 0;
  pointer-events: none;
  transition: all 0.18s ease-out 0.18s;
  bottom: 100%;
  left: 50%;
  position: absolute;
  z-index: 1;
  transform: translate(-50%, 1em);
  transform-origin: top;
}

[dir="ltr"] .dc-tooltip[data-tooltip]:before {
  text-align: left;
}

[dir="rtl"] .dc-tooltip[data-tooltip]:before {
  text-align: right;
}

.dc-tooltip[data-tooltip]:before {
  font-size: 1.2rem;
  color: var(--text-colored-background);
  font-weight: 400;
  text-transform: none;
  line-height: 1.25;
  line-height: 1.5;
  text-decoration: none;
  letter-spacing: normal;
  border-radius: 4px;
  content: attr(data-tooltip);
  padding: 0.7em;
  margin-bottom: 10px;
  width: -moz-max-content;
  width: max-content;
  width: 220px;
  max-width: 280px;
}

.dc-tooltip[data-tooltip]:after {
  border: solid transparent;
  content: "";
  height: 0;
  width: 0;
  position: absolute;
  pointer-events: none;
  border-width: 6px;
  margin-bottom: -2px;
}

.dc-tooltip[data-tooltip][data-tooltip-pos=right]:before, .dc-tooltip[data-tooltip][data-tooltip-pos=right]:after {
  bottom: auto;
  left: 100%;
  top: 50%;
  transform: translate(-1em, -50%);
}

.dc-tooltip[data-tooltip][data-tooltip-pos=right]:before {
  margin-left: 1em;
}

.dc-tooltip[data-tooltip][data-tooltip-pos=right]:hover:after, .dc-tooltip[data-tooltip][data-tooltip-pos=right]:hover:before {
  transform: translate(0, -50%);
}

.dc-tooltip[data-tooltip][data-tooltip-pos=left]:before, .dc-tooltip[data-tooltip][data-tooltip-pos=left]:after {
  bottom: auto;
  left: auto;
  right: 100%;
  top: 50%;
  transform: translate(1em, -50%);
}

.dc-tooltip[data-tooltip][data-tooltip-pos=left]:before {
  /*rtl:ignore*/
  margin-right: 1em;
}

.dc-tooltip[data-tooltip][data-tooltip-pos=left]:hover:after, .dc-tooltip[data-tooltip][data-tooltip-pos=left]:hover:before {
  transform: translate(0, -50%);
}

.dc-tooltip[data-tooltip][data-tooltip-pos=bottom]:before, .dc-tooltip[data-tooltip][data-tooltip-pos=bottom]:after {
  bottom: auto;
  left: 50%;
  top: 100%;
  transform: translate(-50%, -1em);
}

.dc-tooltip[data-tooltip][data-tooltip-pos=bottom]:before {
  margin-top: 1.1em;
}

.dc-tooltip[data-tooltip][data-tooltip-pos=bottom]:hover:after, .dc-tooltip[data-tooltip][data-tooltip-pos=bottom]:hover:before {
  transform: translate(-50%, 0);
}

.dc-tooltip--with-label[data-tooltip]:before, .dc-tooltip--with-label[data-tooltip]:after {
  margin-top: 1em;
}

.dc-tooltip--error[data-tooltip]:before {
  background: var(--status-danger);
}

.dc-tooltip--error[data-tooltip]:after, .dc-tooltip--error[data-tooltip][data-tooltip-pos=top]:after {
  border-top-color: var(--status-danger);
}

.dc-tooltip--error[data-tooltip][data-tooltip-pos=right]:after {
  border-top-color: transparent;
  border-right-color: var(--status-danger);
}

.dc-tooltip--error[data-tooltip][data-tooltip-pos=left]:after {
  border-top-color: transparent;
  border-left-color: var(--status-danger);
}

.dc-tooltip--error[data-tooltip][data-tooltip-pos=bottom]:after {
  border-top-color: transparent;
  border-bottom-color: var(--status-danger);
}

.dc-tooltip--error[data-tooltip]:after, .dc-tooltip--error[data-tooltip]:before, .dc-tooltip--error[data-tooltip][data-tooltip-pos=left]:after, .dc-tooltip--error[data-tooltip][data-tooltip-pos=left]:before {
  opacity: 0.96;
  pointer-events: auto;
  transform: translate(0, -50%);
}

.dc-tooltip--error[data-tooltip]:before, .dc-tooltip--error[data-tooltip][data-tooltip-pos=left]:before {
  width: 180px;
}

.dc-tooltip--error-secondary[data-tooltip]:before {
  background: var(--status-danger);
}

.dc-tooltip--error-secondary[data-tooltip]:after, .dc-tooltip--error-secondary[data-tooltip][data-tooltip-pos=top]:after {
  border-top-color: var(--status-danger);
}

.dc-tooltip--error-secondary[data-tooltip][data-tooltip-pos=right]:after {
  border-top-color: transparent;
  border-right-color: var(--status-danger);
}

.dc-tooltip--error-secondary[data-tooltip][data-tooltip-pos=left]:after {
  border-top-color: transparent;
  border-left-color: var(--status-danger);
}

.dc-tooltip--error-secondary[data-tooltip][data-tooltip-pos=bottom]:after {
  border-top-color: transparent;
  border-bottom-color: var(--status-danger);
}

.dc-tooltip--error-secondary[data-tooltip]:after, .dc-tooltip--error-secondary[data-tooltip]:before, .dc-tooltip--error-secondary[data-tooltip][data-tooltip-pos=left]:after, .dc-tooltip--error-secondary[data-tooltip][data-tooltip-pos=left]:before {
  opacity: 0.96;
  pointer-events: auto;
  transform: translate(0, -50%);
  top: 55%;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/** @define dc-themed-scrollbars */
.dc-themed-scrollbars {
  overflow-y: auto;
  overflow-x: hidden;
  position: relative;
  scroll-behavior: smooth;
  /* Firefox only */
  scrollbar-color: var(--state-active) var(--general-main-1);
  scrollbar-width: thin;
}

.dc-themed-scrollbars__autohide::-webkit-scrollbar-thumb {
  display: none;
}

.dc-themed-scrollbars__autohide--is-hovered::-webkit-scrollbar-thumb {
  display: inline;
  display: initial;
}

.dc-themed-scrollbars--has-horizontal {
  overflow-x: auto;
}

.dc-themed-scrollbars--hidden-scrollbar::-webkit-scrollbar {
  display: none !important;
}

.dc-themed-scrollbars--only-horizontal {
  overflow-y: hidden;
  overflow-x: auto;
}

.dc-themed-scrollbars--only-horizontal-overlay {
  overflow-y: hidden;
  overflow-x: overlay;
}

.dc-themed-scrollbars-wrapper {
  display: flex;
  justify-content: space-between;
  margin-bottom: -3rem;
  padding-bottom: 3rem;
  white-space: nowrap;
}

.dc-themed-scrollbars-wrapper li {
  display: inline-block;
  box-sizing: border-box;
  padding: 0 3rem;
  vertical-align: middle;
  width: auto;
  width: initial;
  height: 40px;
}

@media (min-width: 320px) and (max-width: 767px) {
  .dc-themed-scrollbars-wrapper li {
    padding: 0 1.1rem;
  }
}

.dc-themed-scrollbars::-webkit-scrollbar {
  width: 5px;
  height: 5px;
  background-color: transparent;
  border-radius: 10px;
}

.dc-themed-scrollbars::-webkit-scrollbar-track {
  background-color: transparent;
}

.dc-themed-scrollbars::-webkit-scrollbar-thumb {
  border-radius: 10px;
  background-color: var(--state-active);
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
@keyframes dc-news-ticker {
  0% {
    transform: translate3d(100%, 0, 0);
  }

  100% {
    transform: translate3d(-100%, 0, 0);
  }
}

@keyframes dc-news-ticker-2 {
  0% {
    transform: translate3d(0, 0, 0);
  }

  100% {
    transform: translate3d(-200%, 0, 0);
  }
}

.dc-news-ticker {
  display: flex;
  white-space: nowrap;
  overflow: hidden;
}

.dc-news-ticker__children {
  animation-iteration-count: infinite;
  animation-name: dc-news-ticker;
  animation-timing-function: linear;
  will-change: transform;
}

.dc-news-ticker__children:nth-child(2) {
  animation-name: dc-news-ticker-2;
}

.dc-news-ticker__item {
  display: inline-block;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/* S: Steps
   N: Number
   B: Backspace
   O: Ok
   Z: Zero
 */
.dc-numpad {
  box-sizing: border-box;
  display: grid;
  grid-gap: 0.3rem;
  grid-template-columns: repeat(4, 1fr);
}

.dc-numpad--is-regular {
  grid-template-areas: "np np np np" "r3 r3 r3 b" "r2 r2 r2 b" "r1 r1 r1 o" "z z z o";
  grid-template-columns: min-content min-content min-content minmax(48px, 1fr);
  max-width: -moz-min-content;
  max-width: min-content;
}

.dc-numpad--is-currency {
  grid-template-areas: "np np np np" "r3 r3 r3 b" "r2 r2 r2 b" "r1 r1 r1 o" "z z p o";
  grid-template-columns: min-content min-content min-content minmax(48px, 1fr);
  max-width: -moz-min-content;
  max-width: min-content;
}

.dc-numpad__input-area {
  display: grid;
  grid-area: np;
  grid-template-areas: "dc inp inp nc";
  grid-template-columns: min-content 1fr 1fr min-content;
}

.dc-numpad__decrement {
  grid-area: dc;
}

[dir="ltr"] .dc-numpad__decrement {
  border-top-right-radius: 0;
  border-bottom-right-radius: 0;
}

[dir="rtl"] .dc-numpad__decrement {
  border-top-left-radius: 0;
  border-bottom-left-radius: 0;
}

.dc-numpad__increment {
  grid-area: nc;
}

[dir="ltr"] .dc-numpad__increment {
  border-top-left-radius: 0;
  border-bottom-left-radius: 0;
}

[dir="rtl"] .dc-numpad__increment {
  border-top-right-radius: 0;
  border-bottom-right-radius: 0;
}

.dc-numpad__increment, .dc-numpad__decrement {
  width: 48px;
  height: 48px;
}

.dc-numpad__input-field, .dc-numpad__increment, .dc-numpad__decrement {
  background-color: var(--general-section-2);
  color: var(--text-prominent);
}

.dc-numpad__input-field {
  margin: 0 !important;
}

.dc-numpad__input-field {
  grid-area: inp;
  padding: 0;
  border: none;
  border-radius: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1.6rem;
  color: var(--text-general);
  font-weight: 700;
  text-transform: none;
  text-align: center;
  line-height: 1.75;
  color: var(--text-prominent);
}

.dc-numpad__input-field input {
  padding: 0;
  max-height: 48px;
}

.dc-numpad__input-field--has-error {
  color: var(--status-danger);
  font-weight: bold;
}

[dir="ltr"] .dc-numpad__number {
  text-align: left;
}

[dir="rtl"] .dc-numpad__number {
  text-align: right;
}

.dc-numpad__number {
  border-radius: 2.4rem;
  background-color: var(--general-section-2);
  width: 48px;
  height: 48px;
  font-size: 1.6rem;
  color: var(--text-general);
  font-weight: 700;
  text-transform: none;
  line-height: 1.75;
  color: var(--text-prominent);
}

[dir="ltr"] .dc-numpad__number {
  text-align: left !important;
}

[dir="rtl"] .dc-numpad__number {
  text-align: right !important;
}

.dc-numpad__number--is-disabled, .dc-numpad__number[disabled] {
  background-color: var(--general-disabled) !important;
}

.dc-numpad__number--is-disabled, .dc-numpad__number[disabled] {
  pointer-events: none;
  touch-action: none;
}

.dc-numpad__number--r3 {
  grid-row: 2/2;
}

.dc-numpad__number--r2 {
  grid-row: 3/3;
}

.dc-numpad__number--r1 {
  grid-row: 4/4;
}

.dc-numpad__number--zero {
  width: 100% !important;
}

.dc-numpad__number--zero {
  grid-area: z;
}

.dc-numpad__number--is-left-aligned {
  width: 100%;
}

[dir="ltr"] .dc-numpad__number--is-left-aligned {
  text-align: left;
  padding: 0 0 0 4px;
}

[dir="rtl"] .dc-numpad__number--is-left-aligned {
  text-align: right;
  padding: 0 4px 0 0;
}

.dc-numpad__dot {
  grid-area: p;
}

.dc-numpad__bkspace {
  grid-area: b;
}

.dc-numpad__bkspace button {
  height: 100%;
}

.dc-numpad__ok {
  grid-area: o;
}

.dc-numpad__ok button {
  height: 100%;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.open-livechat__link {
  background: transparent;
  border: none;
  margin: 0;
  padding: 0;
  color: var(--brand-red-coral);
}

.open-livechat__link:hover {
  text-decoration: underline;
  cursor: pointer;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/** @define dc-page-error */
.dc-page-error__container {
  display: flex;
  justify-content: center;
  align-items: center;
  height: calc(100vh - 84px);
}

@media (min-width: 1024px) {
  [dir="ltr"] .dc-page-error__container--left {
    justify-content: left;
  }

  [dir="rtl"] .dc-page-error__container--left {
    justify-content: right;
  }
}

@media screen and (max-width: 1024px) {
  .dc-page-error__container {
    flex-wrap: wrap;
  }
}

.dc-page-error__box {
  background: var(--general-main-1);
  border: var(--general-main-1);
  padding: 2rem;
  display: flex;
  flex-flow: column nowrap;
  align-items: center;
  justify-content: center;
  /* postcss-bem-linter: ignore */
}

@media (min-width: 1024px) {
  .dc-page-error__box--left {
    align-items: start;
  }
}

@media screen and (min-width: 1008px) {
  .dc-page-error__box {
    max-width: calc(100vw - 45%);
  }
}

.dc-page-error__box .inline-icon {
  margin: 0 auto;
}

.dc-page-error__message {
  font-size: 1.6rem;
  color: var(--text-general);
  font-weight: 400;
  text-transform: none;
  text-align: center;
  line-height: 1.75;
  max-width: 502px;
  margin: 1.6rem 0 2.4rem;
}

.dc-page-error__message-wrapper {
  display: flex;
  justify-content: center;
}

@media (min-width: 1024px) {
  [dir="ltr"] .dc-page-error__message-wrapper--left {
    justify-content: left;
  }

  [dir="rtl"] .dc-page-error__message-wrapper--left {
    justify-content: right;
  }
}

.dc-page-error__message-wrapper--left .dc-page-error__message-paragraph:not(:last-child) {
  margin-bottom: 1.6rem;
  max-width: 38rem;
}

@media (min-width: 1024px) {
  [dir="ltr"] .dc-page-error__message--left {
    text-align: left;
  }

  [dir="rtl"] .dc-page-error__message--left {
    text-align: right;
  }
}

.dc-page-error__btn {
  min-width: 14rem;
  margin: 1rem;
}

.dc-page-error__btn-wrapper {
  display: flex;
  justify-content: center;
}

@media (min-width: 320px) and (max-width: 767px) {
  .dc-page-error__btn {
    margin: 0 0 1.6rem;
  }

  .dc-page-error__btn-wrapper {
    flex-direction: column;
  }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.unhandled-error {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

.unhandled-error .dc-btn {
  margin-top: 2.4rem;
}

@media (min-width: 320px) and (max-width: 767px) {
  .unhandled-error {
    height: calc(100vh - 80px);
  }

  .unhandled-error .dc-btn {
    width: 100%;
    margin-top: 1.6rem;
  }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-page-overlay-portal {
  position: absolute;
  height: 100%;
  width: 100%;
  top: 48px;
  transition: transform 0.25s cubic-bezier(0.25, 0.1, 0.1, 0.25), opacity 0.25s cubic-bezier(0.25, 0.1, 0.1, 0.25);
  background-color: var(--general-main-2);
  opacity: 0;
}

@media (max-width: 1279px) {
  .dc-page-overlay-portal {
    top: 48px;
  }
}

.dc-page-overlay--enter, .dc-page-overlay--exit {
  transform: translateY(50px);
  opacity: 0;
  pointer-events: none;
}

.dc-page-overlay--enter-done {
  transform: translateY(0);
  opacity: 1;
  pointer-events: auto;
  z-index: 9;
}

.dc-page-overlay__header {
  position: sticky;
  top: 0;
  z-index: 2;
  background-color: var(--general-main-1);
  padding: 0.8rem 2.4rem;
  border-bottom: 1px solid var(--general-section-1);
}

.dc-page-overlay__header-title {
  flex: 1;
  text-align: center;
  font-size: var(--text-size-m);
  color: var(--text-prominent);
  font-weight: bold;
  line-height: 1.5;
}

@media (max-width: 1279px) {
  .dc-page-overlay__header-title {
    font-size: 1.6rem;
  }
}

.dc-page-overlay__header-close {
  cursor: pointer;
  height: 16px;
  position: absolute;
}

[dir="ltr"] .dc-page-overlay__header-close {
  right: 0;
}

[dir="rtl"] .dc-page-overlay__header-close {
  left: 0;
}

.dc-page-overlay__header-close .dc-icon {
  --fill-color1: var(--text-prominent);
}

@media (max-width: 600px) {
  [dir="ltr"] .dc-page-overlay__header-close {
    right: 1.6rem;
  }

  [dir="rtl"] .dc-page-overlay__header-close {
    left: 1.6rem;
  }
}

@media (min-width: 601px) and (max-width: 1279px) {
  [dir="ltr"] .dc-page-overlay__header-close {
    right: 2.4rem;
  }

  [dir="rtl"] .dc-page-overlay__header-close {
    left: 2.4rem;
  }
}

.dc-page-overlay__header-wrapper {
  width: 100%;
  display: flex;
  align-items: center;
}

@media (max-width: 1279px) {
  .dc-page-overlay__header-wrapper {
    height: 100%;
    padding: 0;
  }
}

@media (max-width: 1279px) {
  .dc-page-overlay__header {
    height: 4rem;
    z-index: 3;
    padding: 0;
    margin: 0;
  }
}

.dc-page-overlay__header-tradershub {
  padding: 0.8rem;
}

.dc-page-overlay__content {
  padding: 2.4rem 0 0;
  display: flex;
  background-color: var(--general-main-1);
}

.dc-page-overlay__content-side-note {
  min-width: 256px;
}

[dir="ltr"] .dc-page-overlay__content-side-note {
  margin-left: 2.4rem;
}

[dir="rtl"] .dc-page-overlay__content-side-note {
  margin-right: 2.4rem;
}

@media (max-width: 1279px) {
  .dc-page-overlay__content {
    flex: 1;
    padding: 0;
  }
}

.dc-page-overlay__header-wrapper, .dc-page-overlay__content {
  max-width: 1232px;
  margin: auto;
  position: relative;
}

@media (max-width: 1279px) {
  .dc-page-overlay__header-wrapper, .dc-page-overlay__content {
    width: 100%;
    display: flex;
    justify-content: center;
  }
}

@media (max-width: 1279px) {
  .dc-page-overlay {
    display: flex;
    flex-direction: column;
    height: 100%;
  }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-password-input__visibility-icon {
  cursor: pointer;
  width: 3.5rem;
  height: 95%;
  padding: 0 1rem;
  background-color: var(--general-main-1);
}

[dir="ltr"] input[style*=background] ~ .dc-password-input__visibility-icon {
  right: 2.4rem;
}

[dir="rtl"] input[style*=background] ~ .dc-password-input__visibility-icon {
  left: 2.4rem;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-password-meter {
  transition: transform 0.25s linear;
  background: var(--status-danger);
  z-index: 2;
}

[dir="ltr"] .dc-password-meter {
  transform-origin: left top;
}

[dir="rtl"] .dc-password-meter {
  transform-origin: right top;
}

.dc-password-meter, .dc-password-meter__bg {
  position: absolute;
  top: 3.5rem;
  height: 4px;
  border-radius: 0 0 3px 3px;
  width: calc(100% - 2px);
}

[dir="ltr"] .dc-password-meter, [dir="ltr"] .dc-password-meter__bg {
  left: 1px;
}

[dir="rtl"] .dc-password-meter, [dir="rtl"] .dc-password-meter__bg {
  right: 1px;
}

.dc-password-meter__bg {
  z-index: 1;
  background: var(--fill-disabled);
}

.dc-password-meter__container {
  position: relative;
}

.dc-password-meter__container .dc-input {
  border-radius: 4px;
}

.dc-password-meter__container .dc-password-meter__warning {
  color: var(--status-warning);
  top: 4.1rem;
}

[dir="ltr"] .dc-password-meter__container .dc-password-meter__warning {
  padding-left: 1.3rem;
}

[dir="rtl"] .dc-password-meter__container .dc-password-meter__warning {
  padding-right: 1.3rem;
}

.dc-password-meter--weak {
  background-color: var(--status-danger);
  z-index: 2;
}

.dc-password-meter--strong {
  background-color: var(--status-success);
  z-index: 2;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-tabs {
  position: relative;
  display: grid;
}

.dc-tabs--top {
  grid-template-rows: auto 1fr;
}

.dc-tabs--100vw {
  width: 100vw;
}

.dc-tabs__list {
  width: 100%;
  line-height: 38px;
  display: flex;
  position: relative;
}

@media (min-width: 320px) and (max-width: 767px) {
  .dc-tabs__list {
    justify-content: center;
  }
}

.dc-tabs__list--overflow-hidden {
  overflow-y: hidden;
  display: block;
}

.dc-tabs__list--border-bottom {
  border-bottom: 2px solid var(--general-section-1);
}

.dc-tabs__list--top {
  order: 0;
}

.dc-tabs__list--bottom {
  order: 1;
  border-top: 2px solid var(--general-section-1);
}

.dc-tabs__list--center {
  justify-content: center;
  width: -moz-fit-content;
  width: fit-content;
  margin: auto;
}

.dc-tabs__list--center .dc-tabs__item {
  padding: 0 2.2rem;
}

@media (min-width: 320px) and (max-width: 767px) {
  .dc-tabs__list--fit-content {
    width: -moz-fit-content;
    width: fit-content;
  }
}

.dc-tabs__list--header-fit-content {
  width: -moz-fit-content;
  width: fit-content;
}

@media (min-width: 320px) and (max-width: 767px) {
  .dc-tabs__list--header-fit-content {
    display: flex;
    justify-content: space-evenly;
  }
}

.dc-tabs__list:not(.dc-tabs__list--header-fit-content) {
  justify-content: center;
}

.dc-tabs__list--full-width {
  width: 100vw;
}

.dc-tabs__item {
  list-style: none;
  font-size: 14px;
  text-align: center;
  white-space: nowrap;
  color: var(--text-general);
  -webkit-touch-callout: none;
  -webkit-tap-highlight-color: transparent;
}

.dc-tabs__item__counter {
  margin-top: -2rem;
  vertical-align: middle;
}

[dir="ltr"] .dc-tabs__item__icon {
  padding-right: 0.7rem;
}

[dir="rtl"] .dc-tabs__item__icon {
  padding-left: 0.7rem;
}

@media (min-width: 320px) and (max-width: 767px) {
  .dc-tabs__item__icon {
    padding-top: 0.5rem;
  }

  [dir="ltr"] .dc-tabs__item__icon {
    padding-right: 0;
  }

  [dir="rtl"] .dc-tabs__item__icon {
    padding-left: 0;
  }
}

.dc-tabs__item--header-fit-content {
  padding: 0px 29px;
}

.dc-tabs__item--is-hidden {
  display: none;
}

.dc-tabs__item--is-scrollable-and-active {
  position: relative;
}

.dc-tabs__item--is-scrollable-and-active:after {
  border-bottom: 2px solid var(--brand-red-coral);
  content: "";
  position: absolute;
  display: block;
  width: 100%;
}

[dir="ltr"] .dc-tabs__item--is-scrollable-and-active:after {
  left: 0;
}

[dir="rtl"] .dc-tabs__item--is-scrollable-and-active:after {
  right: 0;
}

.dc-tabs__item:not(.dc-tabs__active) {
  cursor: pointer;
  color: var(--text-general);
}

.dc-tabs__item:not(.dc-tabs__item--header-fit-content) {
  width: var(--tab-width);
}

.dc-tabs__active {
  font-weight: 700;
  color: var(--text-prominent);
}

.dc-tabs__active-line {
  display: block;
  position: absolute;
  left: 0;
  height: 2px;
  background: var(--brand-red-coral);
  transition: all ease-in-out 0.3s;
}

.dc-tabs__active-line--top {
  bottom: -2px;
}

.dc-tabs__active-line--bottom {
  top: -2px;
}

.dc-tabs__active-line--is-hidden {
  display: none;
}

@media (min-width: 320px) and (max-width: 767px) {
  .dc-tabs__active-line--fit-content {
    width: 120px;
  }
}

.dc-tabs__active-line:not(.dc-tabs__active-line--header-fit-content) {
  width: var(--tab-width);
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-popup {
  position: relative;
  z-index: 9999;
}

.dc-popup__header {
  display: flex;
  width: 100%;
}

.dc-popup__header-content {
  flex: 1;
}

.dc-popup__header-container {
  width: 100%;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.dc-popup__header-close {
  margin-top: -0.3rem;
}

[dir="ltr"] .dc-popup__header-close {
  margin-left: 2.1rem;
  margin-right: -0.3rem;
}

[dir="rtl"] .dc-popup__header-close {
  margin-right: 2.1rem;
  margin-left: -0.3rem;
}

@media (min-width: 320px) and (max-width: 767px) {
  .dc-popup__header-close {
    margin-top: 0.5rem;
  }

  [dir="ltr"] .dc-popup__header-close {
    margin-right: 0.5rem;
  }

  [dir="rtl"] .dc-popup__header-close {
    margin-left: 0.5rem;
  }
}

.dc-popup__header-close-icon {
  cursor: pointer;
}

[dir="ltr"] .dc-popup__header-button {
  margin-left: 1.6rem;
}

[dir="rtl"] .dc-popup__header-button {
  margin-right: 1.6rem;
}

@media (min-width: 320px) and (max-width: 767px) {
  [dir="ltr"] .dc-popup__header-button {
    margin-left: 2.2rem;
  }

  [dir="rtl"] .dc-popup__header-button {
    margin-right: 2.2rem;
  }
}

.dc-popup__header-balance {
  display: flex;
  align-items: center;
}

.dc-popup__header-banner {
  background-color: var(--status-warning);
  border-radius: 10rem;
  padding: 0.4rem 0.8rem;
  display: flex;
  align-items: center;
}

@media (min-width: 1024px) {
  .dc-popup__header-banner {
    margin-top: 0.4rem;
  }
}

@media (min-width: 320px) and (max-width: 767px) {
  .dc-popup__header-banner {
    background-color: var(--general-main-1);
  }

  [dir="ltr"] .dc-popup__header-banner {
    margin-left: 0.8rem;
  }

  [dir="rtl"] .dc-popup__header-banner {
    margin-right: 0.8rem;
  }
}

.dc-popup__header-big-text {
  margin-top: 2rem;
}

.dc-popup__header-title-container {
  display: flex;
  align-items: center;
}

.dc-popup__body {
  padding: 0;
  flex: 1;
  min-height: 0;
}

.dc-popup__body:first-child {
  padding-top: 0 !important;
}

.dc-popup__body .dc-tabs__content--popup {
  background: var(--general-main-1);
}

@media (min-width: 320px) and (max-width: 767px) {
  .dc-popup__body .dc-tabs__list--header--popup {
    overflow-y: hidden;
    -ms-overflow-style: none; /* IE and Edge */
    scrollbar-width: none; /* Firefox */
  }
}

@media (min-width: 320px) and (max-width: 767px) and (min-width: 27.5rem) {
  .dc-popup__body .dc-tabs__list--header--popup {
    overflow-x: hidden;
  }
}

@media (min-width: 320px) and (max-width: 767px) {
  .dc-popup__body .dc-tabs__list--header--popup::-webkit-scrollbar {
    display: none; /* Chrome Safari */
  }
}

@media (min-width: 320px) and (max-width: 767px) {
  .dc-popup__body .dc-tabs__list--popup {
    height: 5.8rem !important;
  }
}

@media (min-width: 320px) and (max-width: 767px) and (max-width: 27.5rem) {
  .dc-popup__body .dc-tabs__list--popup {
    width: 123% !important;
  }

  [dir="ltr"] .dc-popup__body .dc-tabs__list--popup {
    margin-right: 4.2rem;
  }

  [dir="rtl"] .dc-popup__body .dc-tabs__list--popup {
    margin-left: 4.2rem;
  }
}

.dc-popup__body .dc-tabs__item--popup {
  border-radius: 16px 16px 0px 0px;
  display: flex;
  align-items: center;
  justify-content: center;
}

@media (min-width: 320px) and (max-width: 767px) {
  .dc-popup__body .dc-tabs__item--popup {
    width: 8.2rem !important;
  }
  .dc-popup__body .dc-tabs__item--popup {
    height: 5.8rem;
    flex-direction: column;
    font-size: 12px;
    box-sizing: border-box;
  }
}

.dc-popup__body .dc-tabs__active--popup {
  background: var(--general-main-1);
}

.dc-popup__body .dc-tabs--popup {
  height: 100%;
  display: flex;
  flex-direction: column;
}

.dc-popup__footer {
  display: flex;
  justify-content: flex-end;
  padding: 1.6rem;
  position: fixed;
  width: 100%;
  bottom: 0;
}

.dc-popup__footer__separator {
  border-top: 2px solid var(--general-section-1);
}

.dc-popup__overlay {
  transition: opacity 0.1s ease-in-out;
  opacity: 0;
  padding: 3.2rem;
  overflow-y: auto;
  background-color: var(--general-main-1);
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  position: absolute;
  top: 0;
  bottom: 0;
  right: 0;
  left: 0;
}

.dc-popup__overlay:empty {
  display: none;
}

.dc-popup__overlay--enter-done {
  opacity: 0.95;
}

.dc-popup__overlay--exit {
  opacity: 0;
}

.dc-popup__overlay-content {
  max-width: 500px;
}

.dc-popup__overlay-content-header {
  margin-bottom: 0.8rem;
}

.dc-popup__overlay-content-separator {
  height: 1px;
  width: 100%;
  background-color: var(--general-section-1);
}

.dc-popup__overlay-content-list {
  list-style-type: disc;
  margin-top: 2.4rem;
}

[dir="ltr"] .dc-popup__overlay-content-list {
  padding-left: 1.6rem;
}

[dir="rtl"] .dc-popup__overlay-content-list {
  padding-right: 1.6rem;
}

.dc-popup__overlay-content-list li::marker {
  color: var(--text-general);
  font-size: var(--text-size-xs);
}

.dc-popup__overlay-content-list li + li {
  margin-top: 2rem;
}

.dc-popup__overlay-content-button {
  margin-top: 2.4rem;
}

.dc-modal-header--popup {
  height: -moz-fit-content;
  height: fit-content;
  align-items: flex-start;
  flex-grow: 0;
}

.dc-modal-header__title--popup {
  width: 100%;
}

@media (min-width: 320px) and (max-width: 767px) {
  .dc-modal-header__title--popup {
    align-items: flex-start;
  }
}

.dc-modal-header__section--popup {
  padding: 2.4rem;
}

[dir="ltr"] .dc-modal-header__section .dc-modal-header__close {
  margin: 2.1rem 2.1rem 0rem 0rem;
}

[dir="rtl"] .dc-modal-header__section .dc-modal-header__close {
  margin: 2.1rem 0rem 0rem 2.1rem;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/** @define dc-progress-bar */
.dc-progress-bar__container {
  height: 2.4rem;
  width: 12rem;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 1.2rem;
  position: relative;
  overflow: hidden;
}

.dc-progress-bar--danger {
  background-color: var(--status-danger);
}

.dc-progress-bar--warning {
  background-color: var(--status-warning);
}

.dc-progress-bar--normal {
  background-color: var(--status-success);
}

.dc-progress-bar__bar {
  height: 100%;
  position: absolute;
}

[dir="ltr"] .dc-progress-bar__bar {
  left: 0;
}

[dir="rtl"] .dc-progress-bar__bar {
  right: 0;
}

.dc-progress-bar__empty {
  width: 100%;
  position: absolute;
  opacity: 0.16;
  height: 100%;
}

.dc-progress-bar__label {
  z-index: 2;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-progress-bar-tracker {
  display: flex;
  justify-content: center;
  cursor: pointer;
}

.dc-progress-bar-tracker-rectangle {
  width: 2.5rem;
  height: 0.8rem;
  background-color: #ff444f;
  border-radius: 1rem;
}

.dc-progress-bar-tracker-circle {
  width: 0.8rem;
  height: 0.8rem;
  margin: 0 0.4rem;
  border-radius: 50%;
  background-color: var(--fill-normal-1);
}

.dc-progress-bar-tracker-transition {
  transition: all 0.24s linear;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/** @define dc-progress-indicator */
.dc-progress-indicator {
  position: relative;
}

.dc-progress-indicator__container {
  height: 0.4rem;
  width: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 4px;
  position: relative;
  overflow: hidden;
}

.dc-progress-indicator__bar {
  z-index: 2;
  background-color: var(--status-success);
  height: 100%;
  position: absolute;
}

[dir="ltr"] .dc-progress-indicator__bar {
  left: 0;
}

[dir="rtl"] .dc-progress-indicator__bar {
  right: 0;
}

.dc-progress-indicator__empty {
  z-index: 1;
  background-color: var(--general-section-1);
  width: 100%;
  height: 100%;
  position: absolute;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-radio-group {
  display: flex;
  margin-top: 16px;
  flex-direction: row;
  align-items: center;
}

.dc-radio-group__input {
  display: none;
}

[dir="ltr"] .dc-radio-group__item {
  text-align: left;
}

[dir="rtl"] .dc-radio-group__item {
  text-align: right;
}

.dc-radio-group__item {
  display: flex;
  font-size: 1.4rem;
  color: var(--text-prominent);
  font-weight: 400;
  text-transform: none;
  line-height: 1.5;
  cursor: pointer;
  color: var(--text-general);
}

[dir="ltr"] .dc-radio-group__item:not(:last-child) {
  margin-right: 16px;
}

[dir="rtl"] .dc-radio-group__item:not(:last-child) {
  margin-left: 16px;
}

.dc-radio-group__circle {
  border: 2px solid var(--text-general);
  border-radius: 50%;
  box-shadow: 0 0 1px 0 var(--shadow-menu);
  min-width: 16px;
  height: 16px;
  transition: all 0.3s ease-in-out;
  align-self: center;
}

[dir="ltr"] .dc-radio-group__circle {
  margin-right: 8px;
}

[dir="rtl"] .dc-radio-group__circle {
  margin-left: 8px;
}

.dc-radio-group__circle--disabled {
  border-color: var(--border-disabled);
}

.dc-radio-group__circle--selected {
  border-width: 4px;
  border-color: var(--brand-red-coral);
}

.dc-radio-group__circle--error {
  border-color: var(--text-less-prominent);
}

.dc-radio-group__label--disabled {
  color: var(--text-disabled);
}

.dc-radio-group__label--error {
  color: var(--text-loss-danger);
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-read-more__toggle {
  color: var(--status-danger);
  font-weight: var(--text-weight-bold);
}

.dc-read-more__dialog {
  text-decoration: underline;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-select-native {
  width: 100%;
  position: relative;
}

.dc-select-native--hide-selected-value {
  width: 40px;
}

[dir="ltr"] .dc-select-native--hide-selected-value {
  margin-left: 10px;
}

[dir="rtl"] .dc-select-native--hide-selected-value {
  margin-right: 10px;
}

.dc-select-native--hide-selected-value .dc-select-native__wrapper {
  width: 40px;
}

.dc-select-native__container {
  border: 1px solid var(--border-normal);
  border-radius: 4px;
  display: flex;
  align-items: center;
}

.dc-select-native__container:hover:not(.dc-input--disabled) {
  border-color: var(--border-hover);
}

.dc-select-native__container[focus-within] {
  border-color: var(--brand-secondary);
}

.dc-select-native__container:focus-within {
  border-color: var(--brand-secondary);
}

.dc-select-native__container[focus-within]:hover {
  border-color: var(--brand-secondary);
}

.dc-select-native__container:focus-within:hover {
  border-color: var(--brand-secondary);
}

.dc-select-native__container--error {
  border-color: var(--brand-red-coral) !important;
}

.dc-select-native__container--disabled {
  border-color: var(--general-disabled);
}

.dc-select-native__wrapper {
  height: 38px;
}

.dc-select-native__wrapper .dc-input {
  margin-bottom: 0px;
}

.dc-select-native__arrow {
  position: absolute;
  top: 1.3rem;
  --fill-color1: var(--text-less-prominent);
}

[dir="ltr"] .dc-select-native__arrow {
  right: 1.3rem;
}

[dir="rtl"] .dc-select-native__arrow {
  left: 1.3rem;
}

.dc-select-native__display {
  height: 38px;
  width: 100%;
  max-width: calc(100vw - 4rem);
  display: flex;
  align-items: center;
  justify-content: flex-start;
}

[dir="ltr"] .dc-select-native__display {
  padding-left: 1.2rem;
}

[dir="rtl"] .dc-select-native__display {
  padding-right: 1.2rem;
}

@media (min-width: 601px) and (max-width: 1279px) {
  .dc-select-native__display {
    max-width: 56.8rem;
  }
}

.dc-select-native__display-text {
  color: var(--text-prominent);
  font-size: 1.4rem;
  white-space: nowrap;
  overflow: hidden;
  max-width: calc(100% - 4rem);
  text-overflow: ellipsis;
  display: block;
  height: 100%;
  line-height: 3.8rem;
}

.dc-select-native__placeholder {
  position: absolute;
  top: 1.1rem;
  pointer-events: none;
  transition: transform 0.25s linear;
  padding: 0 0.4rem;
  font-size: 1.4rem;
  transform: none;
  background-color: var(--fill-normal);
  color: var(--text-less-prominent);
  line-height: 1.43;
  white-space: nowrap;
  max-width: calc(100% - 3.6rem);
  text-overflow: ellipsis;
  overflow: hidden;
}

[dir="ltr"] .dc-select-native__placeholder {
  left: 1.1rem;
  transform-origin: top left;
}

[dir="rtl"] .dc-select-native__placeholder {
  right: 1.1rem;
  transform-origin: top right;
}

.dc-select-native__placeholder--has-value {
  transform: translate(0, -1.8rem) scale(0.75);
  color: var(--text-general);
  max-width: 100%;
}

.dc-select-native__placeholder--hide-top-placeholder {
  transform: translate(0, -1.8rem) scale(0.75);
  color: var(--text-general);
  max-width: 100%;
  display: none;
}

.dc-select-native__picker {
  opacity: 0;
  width: 100%;
  height: 38px;
  top: 0;
  position: absolute;
}

[dir="ltr"] .dc-select-native__picker {
  left: 0;
}

[dir="rtl"] .dc-select-native__picker {
  right: 0;
}

.dc-select-native--disabled .dc-select-native__display-text {
  color: var(--text-less-prominent);
}

.dc-select-native--disabled .dc-select-native__placeholder:not(.dc-select-native__placeholder--has-value) {
  color: var(--text-less-prominent);
}

.dc-select-native--disabled .dc-icon {
  --fill-color1: var(--text-less-prominent);
}

.dc-select-native--error .dc-select-native__placeholder {
  color: var(--brand-red-coral);
}

[dir="ltr"] .dc-select-native__hint {
  margin-left: 1.2rem;
}

[dir="rtl"] .dc-select-native__hint {
  margin-right: 1.2rem;
}

.dc-select-native__suffix-icon {
  position: absolute;
}

[dir="ltr"] .dc-select-native__suffix-icon {
  left: 11px;
}

[dir="rtl"] .dc-select-native__suffix-icon {
  right: 11px;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/** @define send-email-template */
.send-email-template {
  padding: 0 16px;
}

.send-email-template__title, .send-email-template__subtitle {
  margin-bottom: 1.6rem;
}

.send-email-template__title-platform, .send-email-template__subtitle-platform {
  white-space: nowrap;
}

.send-email-template__close {
  display: flex;
  justify-content: flex-end;
  padding-bottom: 1.2rem;
  cursor: pointer;
}

.send-email-template__icon {
  margin-bottom: 2.4rem;
}

@media (min-width: 320px) and (max-width: 767px) {
  .send-email-template__icon {
    margin-top: 3.2rem;
  }
}

.send-email-template__sent, .send-email-template__cta {
  text-align: center;
}

.send-email-template__cta-btn {
  margin: 3.2rem auto 0;
}

.send-email-template__resend {
  display: grid;
  grid-template-rows: 1fr 1fr 1fr;
  grid-row-gap: 1.6rem;
  max-width: 40rem;
  margin: 2.4rem auto 0;
  color: var(--text-prominent);
  font-size: var(--text-size-xxs);
  line-height: 1.5;
}

.send-email-template__resend .sent-email__content {
  display: grid;
  grid-template-columns: 3.2rem auto;
  grid-gap: 0.8rem;
}

.send-email-template__resend .sent-email__content .inline-icon {
  width: 3.2rem;
  height: 3.2rem;
}

[dir="ltr"] .send-email-template__resend .sent-email__content .inline-icon {
  margin-right: 0.8rem;
}

[dir="rtl"] .send-email-template__resend .sent-email__content .inline-icon {
  margin-left: 0.8rem;
}

.send-email-template__btn {
  margin: 0 auto;
}

.send-email-template-dashboard {
  width: calc(100vw - 33rem);
}

@media (min-width: 320px) and (max-width: 767px) {
  .send-email-template {
    margin-bottom: 1.6rem;
    width: 100%;
  }
}

.send-email-template__footer {
  margin-top: 2.6rem;
}

.send-email-template__footer-live-chat {
  color: var(--text-red);
  cursor: pointer;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.side-note {
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  gap: 1.6rem;
  background-color: var(--general-section-1);
  border-radius: 8px;
  padding: 1.6rem 2.4rem;
  align-self: stretch;
}

.side-note__content {
  display: flex;
  flex-direction: column;
  gap: 0.8rem;
  align-self: stretch;
}

.side-note__header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  gap: 0.8rem;
}

.side-note__action {
  display: flex;
  flex-direction: row;
  align-items: center;
  gap: 0.4rem;
  cursor: pointer;
}

.side-note__action :hover {
  text-decoration: underline;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.switcher-status-badge__parent {
  display: flex;
}

.switcher-status-badge__container {
  display: flex;
  padding: 2px 7px;
  border-radius: 4px;
  align-items: center;
  white-space: nowrap;
  font-size: var(--text-size-xxs);
}

.switcher-status-badge__container--migrated_with_position, .switcher-status-badge__container--migrated_without_position, .switcher-status-badge__container--under_maintenance, .switcher-status-badge__container--unavailable {
  display: inline-flex;
  border: 1.5px solid var(--status-warning);
  color: var(--status-warning);
  font-size: var(--text-size-xxxs);
  align-items: center;
}

.switcher-status-badge__container--pending {
  height: 2.4rem;
  justify-content: center;
  color: var(--status-warning-dark);
  background-color: var(--status-warning-transparent);
  text-decoration: underline;
  font-weight: bold;
}

.switcher-status-badge__container--needs_verification {
  background-color: var(--status-info-transparent);
  color: var(--status-info);
  text-decoration: underline;
  font-weight: bold;
}

.switcher-status-badge__container--failed, .switcher-status-badge__container--rejected, .switcher-status-badge__container--suspected {
  height: 2.4rem;
  border-color: var(--status-danger);
  color: rgb(196, 0, 0);
  font-weight: bold;
  text-decoration: underline;
  background-color: var(--status-danger-transparent);
}

.switcher-status-badge__container--verified {
  height: 2.4rem;
  margin-top: 0.1rem;
  color: rgb(0, 122, 34);
  background-color: var(--status-success-transparent);
  font-weight: bold;
}

[dir="ltr"] .switcher-status-badge__container--icon {
  padding: 0.1rem 0.5rem 0 0;
}

[dir="rtl"] .switcher-status-badge__container--icon {
  padding: 0.1rem 0 0 0.5rem;
}

[dir="ltr"] .switcher-status-badge__container__arrow {
  padding-left: 1rem;
}

[dir="rtl"] .switcher-status-badge__container__arrow {
  padding-right: 1rem;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.swipeable-notification {
  width: 100%;
  min-height: 4.8rem;
  border-radius: 4px;
  padding: 0.8rem;
  background-color: #d6dadb;
  display: flex;
  justify-content: space-between;
  text-decoration: none;
}

.swipeable-notification * {
  color: #333333;
}

.swipeable-notification--failure {
  background-color: #fce3e3;
}

.swipeable-notification--success {
  background-color: #cedddf;
}

.swipeable-notification-content {
  align-self: center;
}

.swipeable-notification-time {
  align-self: flex-end;
}

[dir="ltr"] .swipeable-notification-appear, [dir="ltr"] .swipeable-notification-enter {
  transform: translateX(-100vw);
}

[dir="rtl"] .swipeable-notification-appear, [dir="rtl"] .swipeable-notification-enter {
  transform: translateX(100vw);
}

.swipeable-notification-appear-active, .swipeable-notification-enter-active {
  visibility: hidden;
}

.swipeable-notification-appear-done, .swipeable-notification-enter-done {
  visibility: visible;
  transform: translateX(0);
  transition: transform 300ms;
}

.swipeable-notification-exit {
  transform: translateX(0);
}

.swipeable-notification-exit-active, .swipeable-notification-exit-active-left, .swipeable-notification-exit-active-right {
  visibility: hidden;
  transition: all 300ms;
}

[dir="ltr"] .swipeable-notification-exit-active-left, [dir="ltr"] .swipeable-notification-exit-active-left-left, [dir="ltr"] .swipeable-notification-exit-active-right-left {
  transform: translateX(-100vw);
}

[dir="rtl"] .swipeable-notification-exit-active-left, [dir="rtl"] .swipeable-notification-exit-active-left-left, [dir="rtl"] .swipeable-notification-exit-active-right-left {
  transform: translateX(100vw);
}

[dir="ltr"] .swipeable-notification-exit-active-right, [dir="ltr"] .swipeable-notification-exit-active-left-right, [dir="ltr"] .swipeable-notification-exit-active-right-right {
  transform: translateX(100vw);
}

[dir="rtl"] .swipeable-notification-exit-active-right, [dir="rtl"] .swipeable-notification-exit-active-left-right, [dir="rtl"] .swipeable-notification-exit-active-right-right {
  transform: translateX(-100vw);
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-swipeable {
  position: relative;
  height: 100%;
}

.dc-swipeable__view {
  display: flex;
  flex-direction: row;
  width: -moz-max-content;
  width: max-content;
  height: inherit;
  position: relative;
}

[dir="ltr"] .dc-swipeable__view {
  transition: left 0.1s linear;
}

[dir="rtl"] .dc-swipeable__view {
  transition: right 0.1s linear;
}

.dc-swipeable__item {
  position: relative;
  display: inline-flex;
  width: 100vw;
}

.dc-swipeable__item--is-disabled .dc-swipeable__view {
  transition: none;
}

[dir="ltr"] .dc-swipeable__item--is-disabled .dc-swipeable__view {
  left: -100vw;
}

[dir="rtl"] .dc-swipeable__item--is-disabled .dc-swipeable__view {
  right: -100vw;
}

.dc-swipeable__nav {
  position: absolute;
  bottom: 0;
  width: 100vw;
  display: flex;
  padding: 1.6rem 0.8rem;
  justify-content: space-between;
  pointer-events: none;
}

.dc-swipeable__nav-elevated {
  bottom: 9rem;
}

.dc-swipeable__nav svg {
  z-index: 3;
}

.dc-swipeable__nav * {
  pointer-events: all;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-relative-datepicker {
  width: 100%;
  text-align: center;
  padding-bottom: 16px;
  position: relative;
}

.dc-relative-datepicker__span {
  width: 100%;
  cursor: pointer;
}

.dc-relative-datepicker__input {
  opacity: 0;
  position: absolute;
  top: 0;
  width: 100%;
  height: 100%;
  z-index: 2;
}

[dir="ltr"] .dc-relative-datepicker__input {
  left: 0;
}

[dir="rtl"] .dc-relative-datepicker__input {
  right: 0;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.search-box {
  margin: 2.4rem 0.8rem;
  width: 24rem;
}

@media (min-width: 320px) and (max-width: 767px) {
  .search-box {
    margin: 0;
    width: auto;
  }

  .search-box .dc-input {
    height: 4rem;
  }
}

.search-box__cross-icon {
  cursor: pointer;
}

.search-box__field {
  margin-bottom: 0 !important;
}

.search-box__field {
  text-indent: 2rem;
  height: 4.2rem;
}

.search-box__field ::-moz-placeholder {
  opacity: 0.5;
}

.search-box__field ::placeholder {
  opacity: 0.5;
}

.search-box__field .dc-input {
  justify-content: center;
}

.search-box__field .dc-input__field {
  flex-grow: 1;
  width: auto;
  width: initial;
  text-indent: 2.4rem;
}

[dir="ltr"] .search-box__field .dc-input__field {
  padding-right: 2rem;
}

[dir="rtl"] .search-box__field .dc-input__field {
  padding-left: 2rem;
}

.search-box__field .dc-input__field ::-moz-placeholder {
  opacity: 0.5;
}

.search-box__field .dc-input__field ::placeholder {
  opacity: 0.5;
}

@media (min-width: 320px) and (max-width: 767px) {
  .search-box__field .dc-input__field {
    grid-column: 1;
    width: 100%;
  }

  [dir="ltr"] .search-box__field .dc-input__field {
    margin-left: -1.1rem;
  }

  [dir="rtl"] .search-box__field .dc-input__field {
    margin-right: -1.1rem;
  }
}

.search-box__field .dc-input__leading-icon {
  cursor: pointer;
  top: 31%;
  pointer-events: inherit;
}

[dir="ltr"] .search-box__field .dc-input__leading-icon {
  margin-left: 0.9rem;
}

[dir="rtl"] .search-box__field .dc-input__leading-icon {
  margin-right: 0.9rem;
}

@media (min-width: 320px) and (max-width: 767px) {
  .search-box__field .dc-input__leading-icon {
    padding-bottom: 0.1rem;
  }

  [dir="ltr"] .search-box__field .dc-input__leading-icon {
    padding-right: 0.3rem;
  }

  [dir="rtl"] .search-box__field .dc-input__leading-icon {
    padding-left: 0.3rem;
  }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-table {
  color: var(--text-general);
  background: inherit;
}

.dc-table__row {
  display: grid;
  border-bottom: 1px solid var(--general-section-1);
  height: 100%;
}

.dc-table__row--hover:hover {
  background-color: var(--general-section-1);
  cursor: pointer;
}

.dc-table__header {
  border-bottom: 2px solid var(--general-section-1);
  height: 52px;
}

.dc-table__cell, .dc-table__head {
  font-size: 1.4rem;
  line-height: 1.43;
  display: flex;
  align-items: center;
  white-space: inherit;
  backface-visibility: hidden;
  word-wrap: break-word;
  word-break: break-word;
  word-wrap: break-word;
}

[dir="ltr"] .dc-table__cell, [dir="ltr"] .dc-table__head {
  text-align: left;
}

[dir="rtl"] .dc-table__cell, [dir="rtl"] .dc-table__head {
  text-align: right;
}

.dc-table__cell--right {
  display: flex;
  justify-content: flex-end;
}

.dc-table__cell--fixed {
  position: sticky;
  z-index: 2;
}

[dir="ltr"] .dc-table__cell--fixed {
  left: 0;
}

[dir="rtl"] .dc-table__cell--fixed {
  right: 0;
}

.dc-table__head {
  font-weight: bold;
}

.dc-table__head--right {
  display: flex;
  justify-content: flex-end;
}

.dc-table--scroll .dc-table__header {
  position: sticky;
  top: 0;
  z-index: 3;
}

.dc-table--scrollbar {
  display: block;
}

@supports (-webkit-hyphens: none) {
  .dc-table--scrollbar {
    display: inline;
    display: initial;
  }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/** @define dc-toast; */
.dc-toast {
  width: 100vw;
  transition: transform 0.25s ease, opacity 0.25s linear;
  display: flex;
  justify-content: center;
  align-items: center;
  pointer-events: none;
}

.dc-toast__message {
  max-width: calc(100vw - 3.2rem);
  padding: 0.4rem 0.8rem;
  font-size: 1.4rem;
  color: var(--text-general);
  font-weight: 400;
  text-transform: none;
  text-align: center;
  line-height: 1.5;
  color: var(--text-colored-background);
  border-radius: 4px;
  min-height: 34px;
  display: flex;
  align-items: center;
  pointer-events: all;
}

.dc-toast__error .dc-toast__message {
  background-color: var(--status-danger);
}

.dc-toast__info .dc-toast__message {
  background: var(--status-info);
  font-size: 1.2rem;
  /* iPhone SE screen height fixes due to UI space restrictions */
}

@media only screen and (max-height: 580px) {
  .dc-toast__info .dc-toast__message {
    font-size: 1rem;
  }
}

.dc-toast__notification .dc-toast__message {
  background: var(--general-active);
  padding: 0.9rem 1.2rem;
}

.dc-toast--enter, .dc-toast--exit {
  transform: scale(1, 0);
  opacity: 0;
}

.dc-toast--enter-done {
  transform: scale(1, 1);
  opacity: 1;
}

.dc-toast--blinker .dc-toast__message {
  animation: toast_blinking 0.4s alternate infinite;
}

.dc-toast:not(:first-child) {
  margin-top: 1rem;
}

@keyframes toast_blinking {
  40% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-toggle-switch {
  height: 0;
  width: 0;
  visibility: hidden;
}

.dc-toggle-switch__label {
  display: flex;
  align-items: center;
  cursor: pointer;
  width: 4.9rem;
  height: 2.52rem;
  background: var(--general-disabled);
  border-radius: 4.9rem;
  transition: background-color 0.25s;
}

[dir="ltr"] .dc-toggle-switch__label {
  margin-left: auto;
  margin-right: 1.6rem;
  padding-left: 0.4rem;
}

[dir="rtl"] .dc-toggle-switch__label {
  margin-right: auto;
  margin-left: 1.6rem;
  padding-right: 0.4rem;
}

.dc-toggle-switch__button {
  width: 1.9rem;
  height: 1.9rem;
  border-radius: 1.9rem;
  transition: transform 0.25s;
  background: var(--text-colored-background);
}

.dc-toggle-switch:checked + .dc-toggle-switch__label {
  background: var(--text-profit-success);
}

[dir="ltr"] .dc-toggle-switch:checked + .dc-toggle-switch__label .dc-toggle-switch__button {
  transform: translateX(2.25rem);
}

[dir="rtl"] .dc-toggle-switch:checked + .dc-toggle-switch__label .dc-toggle-switch__button {
  transform: translateX(-2.25rem);
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-tick-picker {
  width: 100%;
  max-width: 300px;
  height: 328px;
  background-color: inherit;
  display: flex;
  flex-direction: column;
  justify-content: flex-end;
}

.dc-tick-picker div {
  display: flex;
}

.dc-tick-picker__calculation {
  margin-bottom: 28px;
  justify-content: space-evenly;
  align-items: center;
}

.dc-tick-picker__calculation .dc-tick-picker__holder {
  color: var(--purchase-main-2);
  flex-direction: column;
  justify-content: center;
  text-align: center;
  margin: 0 1.4rem;
}

.dc-tick-picker__calculation .operator {
  background-color: var(--general-section-2);
  width: 48px;
  height: 48px;
}

.dc-tick-picker__calculation .operator .dc-btn__text {
  transform: scale(2);
}

.dc-tick-picker__submit-wrapper {
  margin-bottom: 1.6rem;
  justify-content: center;
}

.dc-tick-picker__submit-wrapper button {
  background-color: var(--general-section-2);
  height: 48px;
  width: 112px;
}

.dc-tick-picker__submit-wrapper button span {
  color: var(--text-prominent);
  font-size: 1.6rem;
}

.dc-tick-picker__submit-wrapper--is-disabled {
  pointer-events: none;
}

.dc-tick-picker__submit-wrapper--is-disabled .dc-btn {
  background-color: var(--general-disabled);
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-timeline__flex {
  display: flex;
  position: relative;
}

[dir="ltr"] .dc-timeline__flex {
  border-left: var(--brand-red-coral) solid 1px;
  margin-left: 1.2rem;
}

[dir="rtl"] .dc-timeline__flex {
  border-right: var(--brand-red-coral) solid 1px;
  margin-right: 1.2rem;
}

[dir="ltr"] .dc-timeline__flex--no-border {
  border-left: 0;
  border-left: initial;
}

[dir="rtl"] .dc-timeline__flex--no-border {
  border-right: 0;
  border-right: initial;
}

.dc-timeline__container {
  margin-top: 4px;
}

[dir="ltr"] .dc-timeline__container {
  margin-left: 20px;
}

[dir="rtl"] .dc-timeline__container {
  margin-right: 20px;
}

.dc-timeline__title {
  max-width: 500px;
}

.dc-timeline__flex--disabled .dc-timeline__title {
  color: #6e6e6e;
}

.dc-timeline__oval {
  width: 24px;
  height: 24px;
  line-height: 2.35rem;
  background-color: var(--brand-red-coral);
  border-radius: 50%;
  text-align: center;
  position: absolute;
}

[dir="ltr"] .dc-timeline__oval {
  margin-right: 8px;
  padding-left: 1px;
  left: -12px;
}

[dir="rtl"] .dc-timeline__oval {
  margin-left: 8px;
  padding-right: 1px;
  right: -12px;
}

.dc-timeline__flex--disabled .dc-timeline__oval {
  background-color: #6e6e6e;
}

.dc-timeline__number {
  position: relative;
}

[dir="ltr"] .dc-timeline__number {
  left: -1px;
}

[dir="rtl"] .dc-timeline__number {
  right: -1px;
}

.dc-timeline__content {
  margin: 16px 0;
  color: var(--text-prominent);
}

.dc-timeline__content:last-of-type {
  margin-bottom: 0;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/* Loading Spinner */
/** @define block-ui */
.block-ui {
  position: absolute;
  z-index: 3;
  top: 0;
  bottom: 0;
  width: calc(100% - 4px);
  height: 100%;
  background: var(--overlay-inside-dialog);
}

[dir="ltr"] .block-ui {
  left: 0.2em;
  right: 0;
}

[dir="rtl"] .block-ui {
  right: 0.2em;
  left: 0;
}

.block-ui__loading {
  position: absolute;
  top: calc(50% - 22px);
  z-index: 11;
}

[dir="ltr"] .block-ui__loading {
  left: calc(50% - 16px);
}

[dir="rtl"] .block-ui__loading {
  right: calc(50% - 16px);
}

.block-ui__loading-spinner {
  position: relative;
  margin: 0 auto;
  width: 4.2em;
}

.block-ui__loading-spinner:before {
  content: "";
  display: block;
  padding-top: 100%;
}

.block-ui__loading-spinner-circular {
  animation: rotate 2s linear infinite;
  height: 100%;
  transform-origin: center center;
  width: 100%;
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  margin: auto;
}

.block-ui__loading-spinner-path {
  stroke-dasharray: 1, 200;
  stroke-dashoffset: 0;
  animation: dash 1.5s ease-in-out infinite, colorRed 6s ease-in-out infinite;
  stroke-linecap: round;
}

/* Spinner Loader Animation */
@keyframes rotate {
  100% {
    transform: rotate(360deg);
  }
}

@keyframes dash {
  0% {
    stroke-dasharray: 1, 200;
    stroke-dashoffset: 0;
  }

  50% {
    stroke-dasharray: 89, 200;
    stroke-dashoffset: -35px;
  }

  100% {
    stroke-dasharray: 89, 200;
    stroke-dashoffset: -124px;
  }
}

@keyframes colorRed {
  100%, 0% {
    stroke: var(--brand-red-coral);
  }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-vertical-tab {
  display: flex;
  align-items: flex-start;
  justify-content: flex-start;
  border-radius: 4px;
  height: 100%;
}

.dc-vertical-tab:not(.dc-vertical-tab--floating) {
  background-color: var(--general-section-1);
}

.dc-vertical-tab--floating {
  justify-content: center;
}

.dc-vertical-tab--grid {
  display: grid;
  height: calc(100vh - 48px);
  grid-template-areas: "form-sidebar form-title" "form-sidebar form-content";
  grid-template-rows: 5.2rem auto;
}

.dc-vertical-tab__title {
  grid-area: form-title;
  height: 5rem;
  border-top: 1px solid var(--general-section-1);
}

.dc-vertical-tab__content-container {
  position: relative;
  z-index: 0;
  height: 100%;
  width: 100%;
  display: flex;
  flex-flow: column nowrap;
  flex-grow: 1;
}

.dc-vertical-tab__content-container--has-side-note {
  flex-flow: initial;
}

.dc-vertical-tab--full-screen {
  min-height: calc(100svh - 84px);
  width: 100%;
}

.dc-vertical-tab--full-screen.dc-vertical-tab--floating {
  min-height: calc(100svh - 48px - 36px - 53px - 2.4rem);
}

.dc-vertical-tab:not(.dc-vertical-tab--full-screen):not(.dc-vertical-tab--floating) .dc-vertical-tab__content {
  padding: 2.4rem;
}

.dc-vertical-tab__action-bar {
  width: 100%;
  display: flex;
  flex-flow: row-reverse nowrap;
  justify-content: space-between;
  align-items: center;
  padding: 1.6rem;
  box-sizing: border-box;
}

.dc-vertical-tab__action-bar-wrapper {
  cursor: pointer;
  padding: 0.4rem 0.4rem 0.2rem;
  border-radius: 4px;
}

[dir="ltr"] .dc-vertical-tab__action-bar-wrapper {
  margin-left: auto;
}

[dir="rtl"] .dc-vertical-tab__action-bar-wrapper {
  margin-right: auto;
}

.dc-vertical-tab__action-bar-wrapper:hover {
  background: var(--general-hover);
}

.dc-vertical-tab__tab {
  display: flex;
  min-width: 28%;
  height: 100%;
  flex-direction: column;
  background-color: var(--general-section-1);
  position: relative;
}

[dir="ltr"] .dc-vertical-tab__tab {
  border-radius: 4px 0 0 4px;
}

[dir="rtl"] .dc-vertical-tab__tab {
  border-radius: 0 4px 4px 0;
}

.dc-vertical-tab__tab--floating {
  min-width: 256px;
  padding: 0.8rem;
  border-radius: 8px;
}

.dc-vertical-tab__tab--floating .dc-vertical-tab__header--highlight {
  width: calc(100% - 1.6rem);
  border-radius: 4px;
}

.dc-vertical-tab__tab-meta-wrapper {
  grid-area: form-sidebar;
}

.dc-vertical-tab__tab-meta-wrapper--floating {
  position: sticky;
  top: calc(2.4rem + 41px);
}

.dc-vertical-tab__tab-bottom-note {
  position: sticky;
  margin-top: 1.6rem;
}

.dc-vertical-tab__header-title {
  padding: 1.6rem;
  display: flex;
  align-items: center;
  transition: background-color 0.1s ease-in;
  text-decoration: none;
}

[dir="ltr"] .dc-vertical-tab--grouped .dc-vertical-tab__header {
  padding-left: 4.4rem;
}

[dir="rtl"] .dc-vertical-tab--grouped .dc-vertical-tab__header {
  padding-right: 4.4rem;
}

.dc-vertical-tab--grouped .dc-vertical-tab__header--highlight {
  z-index: -1;
}

[dir="ltr"] .dc-vertical-tab--grouped .dc-vertical-tab__header--active {
  padding-left: 4.8rem;
}

[dir="rtl"] .dc-vertical-tab--grouped .dc-vertical-tab__header--active {
  padding-right: 4.8rem;
}

[dir="ltr"] .dc-vertical-tab__header__icon.dc-vertical-tab__header__icon--active {
  margin-right: 2rem;
}

[dir="rtl"] .dc-vertical-tab__header__icon.dc-vertical-tab__header__icon--active {
  margin-left: 2rem;
}

.dc-vertical-tab__header-group-chevron {
  position: absolute;
  transition: transform 0.3s cubic-bezier(0.25, 0.1, 0.25, 1);
}

[dir="ltr"] .dc-vertical-tab__header-group-chevron {
  right: 2.4rem;
}

[dir="rtl"] .dc-vertical-tab__header-group-chevron {
  left: 2.4rem;
}

[dir="ltr"] .dc-vertical-tab__header-group-chevron--invert {
  transform: rotate(180deg);
}

[dir="rtl"] .dc-vertical-tab__header-group-chevron--invert {
  transform: rotate(-180deg);
}

[dir="ltr"] .dc-vertical-tab__header,[dir="ltr"]  .dc-vertical-tab__header-group {
  text-align: left;
}

[dir="rtl"] .dc-vertical-tab__header,[dir="rtl"]  .dc-vertical-tab__header-group {
  text-align: right;
}

.dc-vertical-tab__header, .dc-vertical-tab__header-group {
  font-size: 1.4rem;
  color: var(--text-general);
  font-weight: 700;
  text-transform: none;
  line-height: 1.5;
  line-height: 1.5;
  color: var(--text-general);
  cursor: pointer;
  display: flex;
  align-items: center;
  transition: background-color 0.1s ease-in;
  text-decoration: none;
  z-index: 1;
  -webkit-user-select: none;
     -moz-user-select: none;
          user-select: none;
}

[dir="ltr"] .dc-vertical-tab__header, [dir="ltr"] .dc-vertical-tab__header-group {
  padding: 1rem 1.2rem 1rem 1.6rem;
}

[dir="rtl"] .dc-vertical-tab__header, [dir="rtl"] .dc-vertical-tab__header-group {
  padding: 1rem 1.6rem 1rem 1.2rem;
}

.dc-vertical-tab__header:hover:not(.dc-vertical-tab__header--active):not(.dc-vertical-tab__header-group--active), .dc-vertical-tab__header-group:hover:not(.dc-vertical-tab__header--active):not(.dc-vertical-tab__header-group--active) {
  background-color: var(--state-hover);
}

.dc-vertical-tab__header__link, .dc-vertical-tab__header-group__link {
  font-weight: normal;
}

[dir="ltr"] .dc-vertical-tab__header__link, [dir="ltr"] .dc-vertical-tab__header-group__link {
  margin-right: 0.4rem;
}

[dir="rtl"] .dc-vertical-tab__header__link, [dir="rtl"] .dc-vertical-tab__header-group__link {
  margin-left: 0.4rem;
}

[dir="ltr"] .dc-vertical-tab__header__icon, [dir="ltr"] .dc-vertical-tab__header-group__icon {
  margin-right: 1.6rem;
}

[dir="rtl"] .dc-vertical-tab__header__icon, [dir="rtl"] .dc-vertical-tab__header-group__icon {
  margin-left: 1.6rem;
}

.dc-vertical-tab__header__icon--active, .dc-vertical-tab__header-group__icon--active {
  --fill-color1: var(--text-prominent);
}

.dc-vertical-tab__header__counter, .dc-vertical-tab__header-group__counter {
  position: absolute;
}

[dir="ltr"] .dc-vertical-tab__header__counter, [dir="ltr"] .dc-vertical-tab__header-group__counter {
  right: 2rem;
}

[dir="rtl"] .dc-vertical-tab__header__counter, [dir="rtl"] .dc-vertical-tab__header-group__counter {
  left: 2rem;
}

.dc-vertical-tab__header--active .dc-vertical-tab__header__link, .dc-vertical-tab__header--active .dc-vertical-tab__header-group__link, .dc-vertical-tab__header-group--active .dc-vertical-tab__header__link, .dc-vertical-tab__header-group--active .dc-vertical-tab__header-group__link {
  color: var(--text-prominent);
  font-weight: bold;
}

.dc-vertical-tab__header--highlight, .dc-vertical-tab__header-group--highlight {
  position: absolute;
  display: block;
  content: "";
  color: var(--text-prominent);
  background-color: var(--state-normal);
  width: 100%;
  height: 41px;
  transform: translate3d(0, 0, 0);
  z-index: 0;
}

[dir="ltr"] .dc-vertical-tab__header--highlight, [dir="ltr"] .dc-vertical-tab__header-group--highlight {
  border-left: 4px solid var(--brand-red-coral);
}

[dir="rtl"] .dc-vertical-tab__header--highlight, [dir="rtl"] .dc-vertical-tab__header-group--highlight {
  border-right: 4px solid var(--brand-red-coral);
}

.dc-vertical-tab__header--new, .dc-vertical-tab__header-group--new {
  font-size: 1rem;
  font-weight: bold;
  padding: 0 0.4rem;
  margin: 0 0.4rem;
  background-color: var(--text-loss-danger);
  color: var(--status-colored-background);
  border-radius: 8px;
}

.dc-vertical-tab__header--floating, .dc-vertical-tab__header-group--floating {
  border-radius: 4px;
}

.dc-vertical-tab__content {
  width: 100%;
  height: 100%;
  min-height: inherit;
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  align-items: flex-start;
  position: relative;
  background-color: var(--general-main-1);
  grid-area: form-content;
}

[dir="ltr"] .dc-vertical-tab__content {
  border-radius: 0 4px 4px 0;
}

[dir="rtl"] .dc-vertical-tab__content {
  border-radius: 4px 0 0 4px;
}

.dc-vertical-tab__content-side-note {
  min-width: 25.6rem;
}

[dir="ltr"] .dc-vertical-tab__content-side-note {
  margin-left: 2.4rem;
}

[dir="rtl"] .dc-vertical-tab__content-side-note {
  margin-right: 2.4rem;
}

.dc-vertical-tab__content-side-note-item {
  background-color: var(--general-section-1);
  border-radius: 8px;
  padding: 1.6rem 2.4rem;
  color: var(--text-general);
  font-size: var(--text-size-xxs);
  line-height: 1.5;
  margin-bottom: 2.4rem;
  width: 25.6rem;
}

.dc-vertical-tab__content.dc-vertical-tab:not(.dc-vertical-tab--full-screen) {
  padding: 2.4rem;
  height: 100%;
}

.dc-vertical-tab__content--floating {
  max-width: 952px;
  min-width: 672px;
}

[dir="ltr"] .dc-vertical-tab__content--floating {
  margin-left: 2.4rem;
}

[dir="rtl"] .dc-vertical-tab__content--floating {
  margin-right: 2.4rem;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.wizard {
  width: inherit;
  height: inherit;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.player {
  position: static !important;
  position: initial !important;
}

.player__wrapper {
  position: relative;
}

.player__loader {
  position: absolute;
  top: 0;
  width: 100%;
  height: 100%;
  z-index: 2;
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: transparent;
}

[dir="ltr"] .player__loader {
  left: 0;
}

[dir="rtl"] .player__loader {
  right: 0;
}

.player__loader-circle {
  width: 40px;
  height: 40px;
  border-radius: 50%;
  border: 3px solid rgba(255, 255, 255, 0.2);
  border-top-color: var(--brand-red-coral);
  animation: spin 1s infinite linear;
}

@keyframes spin {
  0% {
    transform: rotate(0deg);
  }

  100% {
    transform: rotate(360deg);
  }
}

.player__overlay {
  position: absolute;
  top: 0;
  height: 100%;
  width: 100%;
  background: rgba(0, 0, 0, 0.72);
  display: flex;
  justify-content: center;
  align-items: center;
  opacity: 0;
  -webkit-transform: translate3d(0, 0, 200px);
}

.player__overlay--visible {
  opacity: 1;
}

.player__overlay__icon {
  margin: 0;
}

.player__overlay__icon-close {
  position: fixed;
  top: 0;
  padding: 1.6rem;
}

[dir="ltr"] .player__overlay__icon-close {
  right: 0;
}

[dir="rtl"] .player__overlay__icon-close {
  left: 0;
}

.player__controls__wrapper {
  position: absolute;
  bottom: 0.2rem;
  z-index: 2;
  width: 100%;
  height: 5.6rem;
  padding: 0 1.6rem;
  opacity: 0;
  pointer-events: none;
  transition: opacity 0.25s linear;
  -webkit-transform: translate3d(0, 0, 200px);
}

[dir="ltr"] .player__controls__wrapper {
  background: linear-gradient(180deg, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 0.6) 100%);
}

[dir="rtl"] .player__controls__wrapper {
  background: linear-gradient(-180deg, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 0.6) 100%);
}

.player__controls__wrapper--visible {
  opacity: 1;
}

.player__controls__wrapper--interactive {
  pointer-events: auto;
}

.player__controls__progress-bar {
  width: 100%;
  background-color: var(--text-colored-background);
  height: 0.4rem;
  border-radius: 4px;
  margin: 0.8rem 0;
  cursor: pointer;
}

.player__controls__progress-bar:not(.player__controls__progress-bar--v2):before {
  content: "";
  display: block;
  height: 2rem;
  width: 100%;
  position: absolute;
  bottom: 67%;
}

.player__controls__progress-bar__filled {
  position: relative;
  width: 0%;
  height: 0.4rem;
  border-radius: 4px;
  background-color: var(--brand-red-coral);
}

.player__controls__progress-bar__filled--animated {
  transition: all 0.3s linear;
}

.player__controls__progress-bar__filled--ended {
  width: 100%;
}

.player__controls__bottom-bar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  height: 3.6rem;
  padding-bottom: 0.4rem;
}

.player__controls__bottom-bar--v2 {
  display: flex;
  flex-direction: column;
  height: 3.6rem;
  padding-bottom: 0.4rem;
}

.player__controls__bottom-bar--v2 .controls__right--v2 {
  display: flex;
  justify-content: flex-end;
  align-items: center;
  gap: 0.8rem;
}

.player__controls__bottom-bar--blocked {
  pointer-events: none;
}

.player__controls__bottom-bar .controls__right {
  width: 10.2rem;
}

.player__controls__time-wrapper {
  margin: 0 1.6rem;
}

.player__controls__time-wrapper--v2 {
  margin: 0;
}

.player__controls__button {
  background: none;
  border: none;
  padding: 0;
  cursor: pointer;
  width: 2.4rem;
  height: 2.4rem;
  display: flex;
  justify-content: center;
  align-items: center;
}

.player__controls__button svg {
  margin: 0 !important;
}

.player__volume__wrapper {
  position: relative;
}

.player__volume__wrapper:before {
  content: "";
  display: block;
  height: 1rem;
  width: 4rem;
  position: absolute;
}

[dir="ltr"] .player__volume__wrapper:before {
  right: -1rem;
}

[dir="rtl"] .player__volume__wrapper:before {
  left: -1rem;
}

.player__volume-bar {
  position: relative;
  width: 0.4rem;
  height: 100%;
  border-radius: 4px;
  cursor: pointer;
  background-color: var(--text-less-prominent);
}

.player__volume-bar__wrapper {
  width: 4rem;
  height: 10.4rem;
  position: absolute;
  bottom: 2.5rem;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 0.8rem 0;
  border-radius: 8px;
  background-color: var(--general-main-2);
  box-shadow: 0 0.8rem 1.6rem 0 var(--shadow-menu);
  transform: translateY(0);
  transition: transform 0.25s ease, opacity 0.25s linear;
  opacity: 0;
}

[dir="ltr"] .player__volume-bar__wrapper {
  right: -1rem;
}

[dir="rtl"] .player__volume-bar__wrapper {
  left: -1rem;
}

.player__volume-bar__wrapper--enter, .player__volume-bar__wrapper--exit {
  transform: translateY(1rem);
  opacity: 0;
}

.player__volume-bar__wrapper--enter-done {
  transform: translateY(0);
  opacity: 1;
}

.player__volume-bar__filled {
  position: absolute;
  bottom: 0;
  width: 0.4rem;
  border-radius: 4px;
  background-color: var(--brand-red-coral);
}

.player__volume-bar__filled--animated {
  transition: all 0.3s linear;
}

.player__volume-dot {
  position: absolute;
  bottom: 90%;
}

[dir="ltr"] .player__volume-dot {
  left: -0.4rem;
}

[dir="rtl"] .player__volume-dot {
  right: -0.4rem;
}

.player__progress-dot, .player__volume-dot {
  width: 1.2rem;
  height: 1.2rem;
  border-radius: 50%;
  background-color: var(--brand-red-coral);
  cursor: pointer;
}

.player__progress-dot {
  position: absolute;
  bottom: -0.3rem;
}

[dir="ltr"] .player__progress-dot {
  left: calc(100% - 0.6rem);
}

[dir="rtl"] .player__progress-dot {
  right: calc(100% - 0.6rem);
}

@media (min-width: 1024px) {
  .player__progress-dot:hover {
    bottom: -0.6rem;
    width: 1.6rem;
    height: 1.6rem;
  }
}

.player__progress-dot--increased-drag-area:before {
  position: absolute;
  content: "";
  height: 2.5rem;
  width: 2.5rem;
  top: 50%;
  border-radius: 50%;
}

[dir="ltr"] .player__progress-dot--increased-drag-area:before {
  left: 50%;
  transform: translate(-50%, -50%);
}

[dir="rtl"] .player__progress-dot--increased-drag-area:before {
  right: 50%;
  transform: translate(50%, -50%);
}

.player__progress-dot--enlarged {
  bottom: -0.6rem;
  width: 1.6rem;
  height: 1.6rem;
}

.player__playback-rate__wrapper {
  width: 6.2rem;
  position: relative;
}

.player__playback-rate__wrapper .playback-rate__icon {
  position: absolute;
}

[dir="ltr"] .player__playback-rate__wrapper .playback-rate__icon {
  left: 0;
}

[dir="rtl"] .player__playback-rate__wrapper .playback-rate__icon {
  right: 0;
}

.player__playback-rate__wrapper .dc-dropdown__select-arrow {
  display: none;
}

.player__playback-rate__wrapper .dc-dropdown__display--playback-rate {
  width: 6.2rem;
  height: 2.3rem;
  background: none;
  border: none;
  border-radius: 8px;
  justify-content: flex-start;
}

.player__playback-rate__wrapper .dc-dropdown__display--playback-rate--v2 {
  width: 6.2rem;
  height: 2.3rem;
  background: none;
  border: none;
  border-radius: 8px;
}

.player__playback-rate__wrapper .dc-dropdown__display--playback-rate--v2 .dc-dropdown__display-text {
  color: var(--text-colored-background);
  font-size: var(--text-size-xxs);
}

[dir="ltr"] .player__playback-rate__wrapper .dc-dropdown__display--playback-rate--v2 .dc-dropdown__display-text {
  padding: 0 0 0 3.5rem;
}

[dir="rtl"] .player__playback-rate__wrapper .dc-dropdown__display--playback-rate--v2 .dc-dropdown__display-text {
  padding: 0 3.5rem 0 0;
}

.player__playback-rate__wrapper .dc-dropdown__display--playback-rate .dc-dropdown__display-text {
  color: var(--text-colored-background);
  font-size: 1rem;
}

[dir="ltr"] .player__playback-rate__wrapper .dc-dropdown__display--playback-rate .dc-dropdown__display-text {
  padding: 0 0 0 2.5rem;
}

[dir="rtl"] .player__playback-rate__wrapper .dc-dropdown__display--playback-rate .dc-dropdown__display-text {
  padding: 0 2.5rem 0 0;
}

.player__playback-rate__wrapper .dc-dropdown-container {
  min-width: 6.2rem;
  width: auto;
  width: initial;
}

.player__playback-rate__wrapper .dc-dropdown-container:before {
  content: "";
  display: block;
  height: 1.7rem;
  width: 7rem;
  position: absolute;
  bottom: 1rem;
}

.player__playback-rate__wrapper .dc-dropdown__list {
  width: 9.7rem;
}

[dir="ltr"] .player__playback-rate__wrapper .dc-dropdown__list {
  right: 10%;
  left: auto;
  left: initial;
}

[dir="rtl"] .player__playback-rate__wrapper .dc-dropdown__list {
  left: 10%;
  right: auto;
  right: initial;
}

.player__playback-rate__wrapper .dc-dropdown__display--playback-rate__item {
  height: 4rem;
  display: flex;
  justify-content: start;
  align-items: center;
}

@media (min-width: 320px) and (max-width: 767px) {
  .player__playback-rate__wrapper .dc-list,
  .player__playback-rate__wrapper .dc-themed-scrollbars {
    max-height: 100vh !important;
  }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.wallet-icon {
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 4px;
  overflow: hidden;
}

.wallet-icon__default-bg {
  background: radial-gradient(100% 4130.74% at 0% 100%, rgba(244, 67, 54, 0.24) 0%, rgba(40, 57, 145, 0.48) 100%) #ffffff;
}

.wallet-icon--xsmall {
  width: 2.4rem;
  height: 1.4rem;
}

.wallet-icon--small {
  width: 4rem;
  height: 2.4rem;
}

.wallet-icon--medium {
  width: 6.4rem;
  height: 4rem;
}

.wallet-icon--large {
  width: 8.4rem;
  height: 5.2rem;
}

.wallet-icon--xlarge {
  width: 12.8rem;
  height: 8rem;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.wallet-card {
  position: relative;
}

.wallet-card__container {
  border-radius: inherit;
  width: 100%;
  height: 100%;
}

.wallet-card__container--active {
  border: 2px solid var(--text-red);
}

.wallet-card__container--small {
  display: flex;
  align-items: center;
  justify-content: center;
}

.wallet-card__container-fade {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  opacity: 0;
  background: var(--wallets-card-active-gradient-background);
  border-radius: inherit;
}

.wallet-card__container-fade--active {
  opacity: 1;
}

.wallet-card__container:hover .wallet-card__container-fade {
  opacity: 1;
}

.wallet-card__container:hover .wallet-card__container-fade--disabled, .wallet-card__container:hover .wallet-card__container-fade--faded, .wallet-card__container:hover .wallet-card__container-fade--added {
  opacity: 0;
}

.wallet-card__shine {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  clip-path: polygon(40% 10%, 104% -6.94%, 92.5% 100%, 28% 100%);
  mix-blend-mode: overlay;
  opacity: 0.16;
  background-color: #ffffff;
}

[dir="ltr"] .wallet-card__shine {
  border-top-right-radius: 8px;
}

[dir="rtl"] .wallet-card__shine {
  border-top-left-radius: 8px;
}

.wallet-card__content {
  position: relative;
  height: 100%;
  width: 100%;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  align-items: center;
  padding: 1.6rem;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-card__content--medium {
    padding: 0.8rem;
  }
}

.wallet-card--small {
  width: 6.4rem;
  height: 4rem;
  border-radius: 4px;
}

.wallet-card--medium {
  width: 20rem;
  height: 12rem;
  border-radius: 8px;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-card--medium {
    width: 16rem;
    height: 9.6rem;
  }
}

.wallet-card--large {
  width: 24rem;
  height: 14.4rem;
  border-radius: 8px;
}

@media (min-width: 320px) and (max-width: 767px) {
  .wallet-card--large {
    width: 21.6rem;
    height: 12.8rem;
  }
}

.wallet-card__active-icon {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  display: flex;
  justify-content: center;
  align-items: center;
}

.wallet-card__active-icon--small {
  position: absolute;
  top: 0;
  width: auto;
  width: initial;
  height: auto;
  height: initial;
}

[dir="ltr"] .wallet-card__active-icon--small {
  left: 100%;
  transform: translate(-1.2rem, -0.4rem);
}

[dir="rtl"] .wallet-card__active-icon--small {
  right: 100%;
  transform: translate(1.2rem, -0.4rem);
}

.wallet-card__top-wrapper {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  width: 100%;
}

.wallet-card__bottom-wrapper {
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  width: 100%;
}

.wallet-card__wallet-button {
  background: #ffffff;
}

.wallet-card__wallet-button-text {
  color: #333333;
}

.wallet-card__wallet-button--added {
  opacity: 0.32;
}

.wallet-card--disabled {
  opacity: 0.32;
}

.wallet-card--faded {
  opacity: 0.72;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.callback {
  font-family: Ubuntu, sans-serif;
  height: 100vh;
  width: 100vw;
  background-repeat: no-repeat;
  background-position: center;
  position: relative;
  align-items: center;
  background: #fff;
}

.callback__content {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  height: 100%;
  gap: 40px;
}

.callback__title {
  color: #000;
  font-size: 24px;
  text-align: center;
  font-weight: 700;
  margin: 0;
}

.callback__button {
  border: 1px solid #000000;
  border-radius: 16px;
  font-weight: 700;
  font-size: 16px;
  line-height: 24px;
  text-align: center;
  background: inherit;
  color: #000;
  max-height: 48px;
}

.callback__button:hover {
  background: inherit;
}
